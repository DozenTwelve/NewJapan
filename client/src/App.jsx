import React, { useState, useEffect } from "react";
import ModernButton from "./components/ModernButton";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import WordPopup from "./components/WordPopup";
import ScoreDisplay from "./components/ScoreDisplay";
import SentenceAnalysisPopup from "./components/SentenceAnalysisPopup";
import QuestionModal from "./components/QuestionModal";
import SimplifiedNews from "./components/SimplifiedNews";
import OriginalText from "./components/OriginalText";

function Button({ children, color = "blue", className = "", ...props }) {
  const colorMap = {
    blue: "bg-blue-600 hover:bg-blue-700",
    green: "bg-green-600 hover:bg-green-700",
    red: "bg-red-600 hover:bg-red-700",
    gray: "bg-gray-500 hover:bg-gray-600",
    yellow: "bg-yellow-500 hover:bg-yellow-600",
    indigo: "bg-indigo-600 hover:bg-indigo-700",
  };
  const base =
    "px-4 py-2 rounded-md text-white font-semibold " +
    (colorMap[color] || colorMap.blue);
  return (
    <button className={`${base} ${className}`} {...props}>
      {children}
    </button>
  );
}

function App() {
  const [newsList, setNewsList] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showQuestion, setShowQuestion] = useState(false);
  const [answerSelected, setAnswerSelected] = useState(false);
  const [isCorrect, setIsCorrect] = useState(null);
  const [showOriginalMode, setShowOriginalMode] = useState(false);
  const [selectedWord, setSelectedWord] = useState(null);
  const [score, setScore] = useState(0);
  const [answeredCount, setAnsweredCount] = useState(0);
  const [analyzingSentence, setAnalyzingSentence] = useState(null);
  const [analysisResult, setAnalysisResult] = useState("");

  useEffect(() => {
    fetch("/news.json")
      .then((res) => res.json())
      .then((data) => {
        const shuffled = data.sort(() => 0.5 - Math.random());
        const selected = shuffled.slice(0, 10);
        setNewsList(selected);
      });

    const today = new Date().toISOString().split("T")[0];
    const savedData = JSON.parse(localStorage.getItem("quizData")) || {};
    if (savedData.date === today) {
      setScore(savedData.score || 0);
      setAnsweredCount(savedData.answered || 0);
    } else {
      localStorage.setItem(
        "quizData",
        JSON.stringify({ date: today, score: 0, answered: 0 })
      );
    }
  }, []);

  const newsData = newsList[currentIndex];
  if (!newsData) return <div className="text-center mt-10">Loading...</div>;

  const questionText = newsData.question?.text;
  const correctAnswer = newsData.question?.answer;

  const sentences = (newsData.original || "")
  .split(/(?<=[„ÄÇÔºÅÔºü\n])/)
  .map((s) => s.trim())
  .filter((s) => s.length > 0);

  function handleAnswer(userAnswer) {
    if (answeredCount >= 1000) {
      alert("‰ªäÊó•„ÅÆ„ÇØ„Ç§„Ç∫„ÅØ1000Âïè„Åæ„Åß„Åß„Åô„ÄÇÊòéÊó•„Åæ„ÅüÊåëÊà¶„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
      return;
    }

    const isCorrectNow = userAnswer === correctAnswer;
    setIsCorrect(isCorrectNow);
    setAnswerSelected(true);

    const newScore = isCorrectNow ? score + 1 : score;
    const newAnswered = answeredCount + 1;

    setScore(newScore);
    setAnsweredCount(newAnswered);

    const today = new Date().toISOString().split("T")[0];
    localStorage.setItem(
      "quizData",
      JSON.stringify({ date: today, score: newScore, answered: newAnswered })
    );
  }

  function goToNextNews() {
    setCurrentIndex((prev) => prev + 1);
    resetState();
  }

  function goToPreviousNews() {
    setCurrentIndex((prev) => Math.max(prev - 1, 0));
    resetState();
  }

  function resetState() {
    setShowQuestion(false);
    setAnswerSelected(false);
    setIsCorrect(null);
    setShowOriginalMode(false);
    setSelectedWord(null);
  }

// ‰øùÁïô‰Ω†ÁöÑÂéüÂßãÁâàÊú¨ÔºåÁî®‰∫éÊÆµËêΩ
  function cleanLineForParagraph(line) {
    return line
      .trimStart() // ÂÖàÊ∏ÖÈô§ÂºÄÂ§¥ÂÖ®Ëßí/ÂçäËßíÁ©∫Ê†º
      .replace(/^(\*+|‚Üí|‚Üí\*+|\*+‚Üí)+\s*/g, "")
      .replace(/^„Éª/g, "")
      .trimEnd()
  }

  // Âè¶‰∏Ä‰∏™Áî®‰∫éÂàóË°®Ôºà‰∏çÁº©ËøõÔºâ
  function cleanLineForListItem(line) {
    return line
      .replace(/^(\*+|‚Üí|‚Üí\*+|\*+‚Üí)+\s*/g, "")
      .replace(/^„Éª/g, "")
      .replace(/^[-*]\s*/, "") // Â§ÑÁêÜ markdown ÁöÑ - * Á≠âÁ¨¶Âè∑
      .trim();
  }

  function renderWithClickableKanji(line, onWordClick) {
    // È´ò‰∫ÆÈÄªËæëÔºöËøûÁª≠2‰∏™‰ª•‰∏äÊ±âÂ≠óÔºåÊàñ Ê±âÂ≠ó+ÂÅáÂêç
    const regex = /[\u4E00-\u9FFF]{2,}|[\u4E00-\u9FFF][„ÅÅ-„Çì„Ç°-„É≥]+/g;
  
    const parts = [];
    let lastIndex = 0;
    let match;
  
    while ((match = regex.exec(line)) !== null) {
      const { index } = match;
      const word = match[0];
  
      if (index > lastIndex) {
        parts.push(line.slice(lastIndex, index)); // ÈùûÂåπÈÖçÈÉ®ÂàÜ
      }
  
      parts.push(
        <span
          key={index}
          className="underline decoration-dotted cursor-pointer text-inherit hover:bg-blue-100 px-1"
          onClick={() => onWordClick(word)}
        >
          {word}
        </span>
      );
  
      lastIndex = index + word.length;
    }
  
    if (lastIndex < line.length) {
      parts.push(line.slice(lastIndex));
    }
  
    return parts;
  }
  

  async function handleWordClick(word) {
    setSelectedWord({
      word,
      reading: "",
      aiResult: "AI„Å´„Çà„ÇãÁøªË®≥‰∏≠...",
      audio: null
    });
  
    const result = await translateWordWithAI(word);
  
    setSelectedWord({
      word,
      reading: result.reading,
      aiResult: result.translation,
      audio: null
    });
  }
  

  async function translateWordWithAI(word) {
    const prompt = `
  ‰ª•‰∏ã„ÅÆÊó•Êú¨Ë™û„ÅÆÂçòË™û„Å´„Å§„ÅÑ„Å¶„ÄÅ„Éô„Éà„Éä„É†‰∫∫Â≠¶ÁøíËÄÖÂêë„Åë„Å´Á∞°ÊΩî„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
  
  - „Éô„Éà„Éä„É†Ë™ûË®≥„ÇíÂøÖ„ÅöÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
  - „Å≤„Çâ„Åå„Å™Ë™≠„Åø„ÇÇË°®Á§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
  
  ÂçòË™ûÔºö„Äå${word}„Äç
  
  Âá∫ÂäõÂΩ¢ÂºèÔºö
  - ÂçòË™ûÔºö...
  - „Çà„ÅøÔºö...
  - „Éô„Éà„Éä„É†Ë™ûË®≥Ôºö...
  `.trim();
  
    try {
      const res = await fetch("https://newjapan-api.onrender.com/api/explain", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt })
      });
  
      const raw = await res.text();
      const data = JSON.parse(raw);
      const content = data.choices?.[0]?.message?.content || "";
  
      // Ê≠£ÂàôÊèêÂèñÈÉ®ÂàÜÂÜÖÂÆπ
      const readingMatch = content.match(/„Çà„ÅøÔºö(.+?)(?:\n|$)/);
      const vietnameseMatch = content.match(/„Éô„Éà„Éä„É†Ë™ûË®≥Ôºö(.+?)(?:\n|$)/);
  
      return {
        reading: readingMatch ? readingMatch[1].trim() : "Ôºà‰∏çÊòéÔºâ",
        translation: vietnameseMatch ? vietnameseMatch[1].trim() : "ÔºàË®≥„Å™„ÅóÔºâ",
        raw: content // Â¶ÇÊûú‰Ω†ËøòÊÉ≥‰øùÁïôÂéüÊñá‰Ωú‰∏∫ debug
      };
    } catch (error) {
      console.error("AIÁøªË®≥„Ç®„É©„Éº", error);
      return {
        reading: "Ôºà„Ç®„É©„ÉºÔºâ",
        translation: "AIÁøªË®≥‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
        raw: ""
      };
    }
  }
  
  async function handleSentenceClick(sentence) {
    setAnalyzingSentence(sentence);
    setAnalysisResult("AI„Å´„Çà„ÇãÊñáÊ≥ïÂàÜÊûê‰∏≠...");
  
    const prompt = `
  ‰ª•‰∏ã„ÅÆÊó•Êú¨Ë™û„ÅÆÊñá„Å´Âê´„Åæ„Çå„Çã‰∏ª„Å™ÊñáÊ≥ïË°®ÁèæÔºàÂä©Ë©û„ÉªÊñáÂûãÔºâ„Çí1ÔΩû2ÂÄãÊåô„Åí„ÄÅ„Åù„Çå„Åû„Çå„ÅÆÊÑèÂë≥„Å®‰Ωø„ÅÑÊñπ„ÇíÁ∞°Âçò„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇJLPT N3„ÄúN2„É¨„Éô„É´„ÅÆÂ≠¶ÁøíËÄÖÂêë„Åë„Å´„ÄÅ„Çè„Åã„Çä„ÇÑ„Åô„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
  
  ÊñáÔºö„Äå${sentence}„Äç
  Âá∫Âäõ„ÅØ‰ª•‰∏ã„ÅÆMarkdownÂΩ¢Âºè„Å´**ÈôêÂÆö**„Åó„ÄÅÂâçÁΩÆ„Åç„ÇÑË£úË∂≥Ë™¨Êòé„ÅØÊõ∏„Åã„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºö
  
  - ÊñáÊ≥ï„Éù„Ç§„É≥„Éà1Ôºö„Äá„Äá
    - ÊÑèÂë≥Ôºö...
    - Áî®Ê≥ïÔºö...
  - ÊñáÊ≥ï„Éù„Ç§„É≥„Éà2Ôºö„Äá„Äá
    - ÊÑèÂë≥Ôºö...
    - Áî®Ê≥ïÔºö...
  
  Á∞°ÊΩî„Å´„ÄÅ100ÊñáÂ≠ó‰ª•ÂÜÖ„Åß„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    `.trim();
  
    try {
      const res = await fetch("https://newjapan-api.onrender.com/api/explain", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });
  
      const raw = await res.text();
      console.log("üì¶ AI ËøîÂõûÂéüÂßãÂÜÖÂÆπ:", raw);
  
      let data;
      try {
        data = JSON.parse(raw);
      } catch (err) {
        console.error("‚ùå JSON Ëß£ÊûêÂ§±Ë¥•:", err);
        setAnalysisResult("AIÂøúÁ≠î„ÅÆËß£Êûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ");
        return;
      }
  
      const output = data.choices?.[0]?.message?.content;
      console.log("‚úÖ OpenRouter ÂìçÂ∫îÁªìÊûú:", output);
  
      if (output) {
        setAnalysisResult(output);
        console.log("üéØ AI ÊñáÊ≥ïÂàÜÊûêÁµêÊûúÔºö", output);
      } else {
        setAnalysisResult("Ëß£ÊûêÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ");
      }
    } catch (error) {
      console.error("OpenRouter API „Ç®„É©„Éº:", error);
      setAnalysisResult("ÊñáÊ≥ïÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ");
    }
  }

  return (
    <div className="flex flex-col items-center p-6 gap-6 min-h-screen bg-gray-100 text-gray-900">
      <h1 className="text-3xl font-bold text-blue-600 mb-4">„ÇÑ„Åï„Åó„ÅÑ„Éã„É•„Éº„Çπ</h1>
      <ScoreDisplay score={score} />

      {!showOriginalMode ? (
        <SimplifiedNews
          newsData={newsData}
          onWordClick={handleWordClick}
          showQuestion={showQuestion}
          answerSelected={answerSelected}
          currentIndex={currentIndex}
          onStartQuestion={() => {
            setShowQuestion(true);
            setSelectedWord(null);
          }}
          onPrevious={goToPreviousNews}
          onNext={goToNextNews}
        />
      ) : (
        <>
        <OriginalText
          newsData={newsData}
          sentences={sentences}
          onSentenceClick={handleSentenceClick}
          onBack={() => setShowOriginalMode(false)}
          onNext={goToNextNews}
        />
        </>
      )}

        {showQuestion && (
          <QuestionModal
            questionText={questionText}
            correctAnswer={correctAnswer}
            isCorrect={isCorrect}
            answerSelected={answerSelected}
            onAnswer={handleAnswer}
            onClose={() => setShowQuestion(false)}
            onNext={goToNextNews}
            onShowOriginal={() => {
              setShowOriginalMode(true);
              setShowQuestion(false);
            }}
          />
        )}

      {selectedWord && (
        <WordPopup selectedWord={selectedWord} onClose={() => setSelectedWord(null)} />
      )}

      <SentenceAnalysisPopup
        analyzingSentence={analyzingSentence}
        analysisResult={analysisResult}
        onClose={() => setAnalyzingSentence(null)}
      />

    </div>
  );
}

export default App;
